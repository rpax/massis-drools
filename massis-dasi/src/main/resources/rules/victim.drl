//created on: Apr 16, 2016
package com.massisframework.massis.dasi.apps.robots.victim

import java.util.*;
import java.util.concurrent.*;
import com.massisframework.massis.dasi.lowlevel.LowLevelInfo;
import com.massisframework.massis.dasi.agents.goals.*;
import com.massisframework.massis.dasi.agents.tasks.AgentTask;
import com.massisframework.massis.dasi.agents.tasks.SimpleTasksFactory;
import com.massisframework.massis.dasi.events.messages.MessageReceived;
import com.massisframework.massis.model.agents.LowLevelAgent;
import com.massisframework.massis.model.building.SimRoom;
import com.massisframework.massis.model.location.Location;

//Robots
import com.massisframework.massis.dasi.apps.robots.*;
import com.massisframework.massis.dasi.apps.robots.messages.*;
import com.massisframework.massis.dasi.apps.robots.messages.getHelp.*;
import com.massisframework.massis.dasi.apps.robots.victim.info.*;
import com.massisframework.massis.dasi.apps.robots.commontasks.*;


/**
* Inicializacion de WorkMemory.
**/
rule "Generate Goal Memory"
	when
		not GoalMemory(  )
 	then
  		insert(new GoalMemory());
end


/**
* Selecion de objetivo por parte de trabajador (aleatorio).
**/
rule "Select target"	
    when
    	$me : VictimRobot()
    	LowLevelInfo($lla : lowLevelAgent)
        not CurrentTarget()
    then
    	SimRoom rndRoom = $lla.getRandomRoom();
        Location rndLoc = rndRoom.getRandomLoc();
		CurrentTarget currentTarget = new CurrentTarget(rndLoc);
		insert(currentTarget);
end


/**
* Eliminar objetivo por que estoy cerca. (aleatorio).
**/
rule "Less than 1 meter of distance : remove current target"
	
    when
    	LowLevelInfo( $currentLoc : location  )
        $currentTarget : CurrentTarget(location.distance2D($currentLoc)<100)
    then
    	delete($currentTarget);
end


/**
* Mover robot hacia objetivo si tiene energia.
**/
rule "Move to the target (if has energy)"
	
    when
       $me : VictimRobot($energy : energy > 0)
       LowLevelInfo( $currentLoc : location )
       CurrentTarget(location.distance2D($currentLoc)>=100,$targetLoc : location)
    then
	  AgentTask task = new MoveToTarget();
	  task.execute($me,$targetLoc);
end

/**
* Enviar peticion de ayuda a todos los robots de la simulacion.
**/
rule "Send help me message due to lack of energy"
    when
       not(exists(RequestVerified()))
       $me : VictimRobot(energy <= 0 )
    then
    	$me.info("Send help me message due to lack of energy", "titulo");
    	$me.info("No tengo suficiente energia.", "info");
   	  	$me.info("Mando mensaje broadcast a todos los robots de la simulacion.", "envio");
   	  	String uuid=UUID.randomUUID().toString();
	   	SimpleTasksFactory.sendMessage($me,new IHaveNoEnergy($me.getLocation(), uuid));
end


/**
* Eliminacion de check por que la peticion de ayuda ya ha sido atendida y el robot
* esta a salvo.
**/
rule "I have energy."
    when
       $re : RequestVerified()
       $me : VictimRobot(energy > 0 )
    then
    	$me.info("I have energy.", "titulo");
    	$me.info("Ya tengo energia puedo continuar mi trabajo.", "info");
   	  	delete($re);
end

/**
* Check para evitar que la victima envio infinitas veces.
**/
rule "Received ACK message"
    when
        $me : VictimRobot(energy <= 0 )
        $mr		: MessageReceived(
						data instanceof IKnowYourState,
						sender instanceof RobotAgent,
						$sender  : sender,
						$location : data.info,
						$uuid : data.uuid
 					) from entry-point MESSAGING
    then
	 	$me.info("Received ACK message.", "titulo");
    	$me.info("Recibido mensaje ACK para que no mande mas peticiones de rescate.", "info");
 	 	insert(new RequestVerified());
	 	delete($mr);
end