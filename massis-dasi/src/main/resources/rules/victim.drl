//created on: Apr 16, 2016
package com.massisframework.massis.dasi.apps.robots.victim

import java.util.*;
import java.util.concurrent.*;
import com.massisframework.massis.dasi.lowlevel.LowLevelInfo;
import com.massisframework.massis.dasi.agents.goals.*;
import com.massisframework.massis.dasi.agents.tasks.AgentTask;
import com.massisframework.massis.dasi.agents.tasks.SimpleTasksFactory;
import com.massisframework.massis.dasi.events.messages.MessageReceived;
import com.massisframework.massis.model.agents.LowLevelAgent;
import com.massisframework.massis.model.building.SimRoom;
import com.massisframework.massis.model.location.Location;

//Robots
import com.massisframework.massis.dasi.apps.robots.*;
import com.massisframework.massis.dasi.apps.robots.messages.*;
import com.massisframework.massis.dasi.apps.robots.messages.help.*;
import com.massisframework.massis.dasi.apps.robots.messages.safepoint.*;
import com.massisframework.massis.dasi.apps.robots.victim.info.*;
import com.massisframework.massis.dasi.apps.robots.victim.goals.*;
import com.massisframework.massis.dasi.apps.robots.commontasks.*;


/**
* Inicializacion de WorkMemory.
**/
rule "Generate Goal Memory"
	when
		not GoalMemory(  )
 	then
  		insert(new GoalMemory());
end


/**
* Selecion de objetivo por parte de trabajador (aleatorio).
**/
rule "Select target"	
    when
    	$gm : GoalMemory( $goals : goals , containsGoalByClass(GoToSafePoint.class)==false)
    	$me : VictimRobot()
    	LowLevelInfo($lla : lowLevelAgent)
        not CurrentTarget()
    then
    	SimRoom rndRoom = $lla.getRandomRoom();
        Location rndLoc = rndRoom.getRandomLoc();
		CurrentTarget currentTarget = new CurrentTarget(rndLoc);
		insert(currentTarget);
end


/**
* Eliminar objetivo por que estoy cerca. (aleatorio).
**/
rule "Less than 1 meter of distance : remove current target"
	
    when
    	$me : VictimRobot()
    	$gm : GoalMemory( $goals : goals , containsGoalByClass(GoToSafePoint.class)==false)
    	LowLevelInfo( $currentLoc : location  )
        $currentTarget : CurrentTarget(location.distance2D($currentLoc)<100)
    then
    	delete($currentTarget);
end


/**
* Mover robot hacia objetivo si tiene energia.
**/
rule "Move to the target (if has energy)"
	
    when
       $me : VictimRobot($energy : energy > 0)
       LowLevelInfo( $currentLoc : location )
       CurrentTarget(location.distance2D($currentLoc)>=100,$targetLoc : location)
    then
	  AgentTask task = new MoveToTarget();
	  task.execute($me,$targetLoc);
end

/**
* Enviar peticion de ayuda a todos los robots de la simulacion.
**/
rule "Send help me message due to lack of energy"
    when
       $me : VictimRobot(energy <= 0 , esperando == false)
    then
    	$me.info("Send help me message due to lack of energy", "titulo");
    	$me.info("No tengo suficiente energia.", "info");
   	  	$me.info("Mando mensaje broadcast a todos los robots de la simulacion.", "envio");
   	  	String uuid=UUID.randomUUID().toString();
	   	SimpleTasksFactory.sendMessage($me,new IHaveNoEnergy($me.getLocation(), uuid));
	   	modify($me){setEsperando(true)}
end


/**
* Eliminacion de check por que la peticion de ayuda ya ha sido atendida y el robot
* esta a salvo.
**/
rule "I have energy."
    when
       $me : VictimRobot(energy > 0
       						, esperando ==true )
    then
    	$me.info("I have energy.", "titulo");
    	$me.info("Ya tengo energia puedo continuar mi trabajo.", "info");
	   	modify($me){setEsperando(false)}
	   	insert(new BatteryVerified());
end

/**
* Check para evitar que la victima envio infinitas veces.
**/
rule "Received ACK message. First time"
    when
    	$gm : GoalMemory()
        $me : VictimRobot(energy <= 0 )
        $currentTarget : CurrentTarget()
        $mr		: MessageReceived(
						data instanceof IKnowYourState,
						sender instanceof RobotAgent,
						$sender  : sender,
						$location : data.info,
						$uuid : data.uuid
 					) from entry-point MESSAGING
 		not(GoToSafePoint())
    then
	 	$me.info("Received ACK message. First time", "titulo");
    	$me.info("Recibido mensaje ACK para que no mande mas peticiones de rescate.", "info");
	 	retract($mr);
	 	
	 	GoToSafePoint kmt = new GoToSafePoint(null);
 		insert(kmt);
  	    modify($gm){addGoal(kmt)};
  	    
  	    $me.info("He incluido un nuevo objetivo: ir al safe point " + $gm.toString(), "info");
	 	
	 	// Para ir a a la nueva posicion tenemos que decidir dejar de ir a la que queriamos ir antes
	 	retract($currentTarget);
end


/**
* Check para evitar que la victima envio infinitas veces.
**/
rule "Received ACK message."
    when
    	$gm : GoalMemory()
        $me : VictimRobot(energy <= 0 )
        $currentTarget : CurrentTarget()
        $mr		: MessageReceived(
						data instanceof IKnowYourState,
						sender instanceof RobotAgent,
						$sender  : sender,
						$location : data.info,
						$uuid : data.uuid
 					) from entry-point MESSAGING
 		$sfp : GoToSafePoint()
    then
	 	$me.info("Received ACK message.", "titulo");
    	$me.info("Recibido mensaje ACK para que no mande mas peticiones de rescate.", "info");
	 	retract($mr);
  	    
  	    $me.info("He incluido un nuevo objetivo: ir al safe point " + $gm.toString(), "info");

end


/**
* Enviar peticion de conocer la posicion del safe-point (la de un lider).
**/
rule "Ask for leader position, I want to go to the Safe point"
    when
       $btv: BatteryVerified();
       $gm : GoalMemory()
       $kmt : GoToSafePoint( goalState == AgentGoal.PENDING )
       $me : VictimRobot(energy > 0 )
    then
    	$me.info("Ask for leader position, I want to go to the Safe point", "titulo");
    	$me.info("Me quede sin energia y ya estoy recargado", "info");
   	  	$me.info("Mando mensaje broadcast a todos los robots de la simulacion.", "envio");
   	  	String uuid=UUID.randomUUID().toString();
	   	SimpleTasksFactory.sendMessage($me,new IWantSafePointLocation($me.getLocation(), uuid));
	   	modify($kmt){ setGoalState( AgentGoal.SOLVING ) }
	   	retract($btv);
end


/**
* Recibir la posicion del safe-point.
**/
rule "Receive Safe point position"
    when
       $gm : GoalMemory()
       $kmt : GoToSafePoint ( goalState  == AgentGoal.SOLVING ) from $gm.goals
       $me : VictimRobot(energy > 0 )
       $mr		: MessageReceived(
						data instanceof SafePointPosition,
						sender instanceof RobotAgent,
						$sender  : sender,
						$location : data.info,
						$uuid : data.uuid
 					) from entry-point MESSAGING
    then
    	$me.info("Receive Safe point position", "titulo");
    	$me.info("Recibo la posicion del safe point", "info");
   	  	String uuid=UUID.randomUUID().toString();
        Location rndLoc = $location;
		CurrentTarget currentTarget = new CurrentTarget(rndLoc);
		insert(currentTarget);
		retract($mr);
end

/**
* Estoy cerca del Safe point.
**/
rule "Less than 1 meter of distance from Safe Point"
	
    when
        $gm : GoalMemory()
        $kmt : GoToSafePoint ( goalState == AgentGoal.SOLVING )
        $me : VictimRobot()
    	LowLevelInfo( $currentLoc : location  )
        $currentTarget : CurrentTarget(location.distance2D($currentLoc)<100)
    then
    	$me.info("Less than 1 meter of distance from Safe Point", "titulo");
    	$me.info("He llegado cerca del safe point", "info");
    	//$me.info("Mis objetivos" + $gm.toString() + ".", "info");
    	retract($currentTarget);
    	modify($kmt){ setGoalState( AgentGoal.SOLVED ) }
    	String uuid=UUID.randomUUID().toString();
	   	SimpleTasksFactory.sendMessage($me,new SafePointReached($me.getLocation(), uuid));
end