//created on: Apr 11, 2016
package com.massisframework.massis.dasi.apps.robots.leader

//std imports
import java.util.*;
import java.util.logging.Logger;
import java.util.concurrent.*;
import com.massisframework.massis.dasi.lowlevel.LowLevelInfo;
import com.massisframework.massis.dasi.agents.tasks.AgentTask;
import com.massisframework.massis.dasi.agents.tasks.SimpleTasksFactory;
import com.massisframework.massis.dasi.events.messages.MessageReceived;
import com.massisframework.massis.dasi.agents.goals.*;
//robots
import com.massisframework.massis.dasi.apps.robots.*;
import com.massisframework.massis.dasi.apps.robots.messages.*;
import com.massisframework.massis.dasi.apps.robots.messages.getHelp.*;
import com.massisframework.massis.dasi.apps.robots.messages.knowTeam.*;
import com.massisframework.massis.dasi.apps.robots.messages.orders.*;
import com.massisframework.massis.dasi.apps.robots.messages.saveVictimNegotiation.*;
//leader
import com.massisframework.massis.dasi.apps.robots.leader.info.TermNegotiation.NegotiationStatus;
import com.massisframework.massis.dasi.apps.robots.leader.*;
import com.massisframework.massis.dasi.apps.robots.leader.info.*;
import com.massisframework.massis.dasi.apps.robots.leader.goals.*;
//subordinate
import com.massisframework.massis.dasi.apps.robots.subordinate.SubordinateRobot;
//victim
import com.massisframework.massis.dasi.apps.robots.victim.VictimRobot;
//declare any global variables here

//=============================================================================
// Goal selection
//-----------------------------------------------------------------------------
rule "Generate Goal Memory"
	when
		not GoalMemory(  )
 	then
  		insert(new GoalMemory());
end

rule "Add know my team goal if not present"	
	when
		$gm : GoalMemory( $goals : goals , containsGoalByClass(KnowMyTeam.class)==false)
 	then
 		KnowMyTeam kmt = new KnowMyTeam();
 		insert(kmt);
  	    $gm.addGoal(kmt);
end


//=============================================================================
// Team negotiation rules
//-----------------------------------------------------------------------------
// Goal Trigger
rule "If I dont know my team : The current goal changes."
	when
		$me  : LeaderRobot($team : teamName)
		$gm  : GoalMemory()
		$kmt : KnowMyTeam ( goalState  == AgentGoal.PENDING ) from $gm.goals
 	then
 	   String uuid=UUID.randomUUID().toString();
 	   SimpleTasksFactory.sendMessage($me,new HiTeam($team,uuid));
  	   modify($kmt){ setGoalState( AgentGoal.SOLVED ) }	   
end


rule "Received HiTeamResponseMember"
	when
		$me		: LeaderRobot()
		$mr		: MessageReceived(
							data instanceof HiTeamResponseMember,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
 	  $me.getLogger().info("Adding "+$sender+" to my pool TeamMembers.");
 	  SimpleTasksFactory.sendMessage($me,$sender,new YouArePartOfMyTeam("1",$uuid));
 	  modify($me){ addTeamMember((RobotAgent)$sender)}
 	  delete($mr);
end

rule "Received HiTeamResponseLeader"
	when
		$me		: LeaderRobot()
		$mr		: MessageReceived(
							data instanceof HiTeamResponseLeader,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
 	  $me.getLogger().info("Adding "+$sender+" to my pool Leader.");
 	  SimpleTasksFactory.sendMessage($me,$sender,new AddedToMyPoolLeader("1",$uuid));
 	  modify($me){ addTeamLeader((RobotAgent)$sender)}
 	  delete($mr);
end

rule "Received HiTeam"
	when
		$me		: LeaderRobot($team : teamName)
		$mr		: MessageReceived(
							data instanceof HiTeam,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
     	not(eval($team==$info))
 	then
 	  $me.getLogger().info("I received a HiTeam message of "+$sender+".");
 	  SimpleTasksFactory.sendMessage($me,$sender,new HiTeamResponseLeader($team,$uuid));
 	  delete($mr);
end


rule "AddedToPoolLeader"
	when
		$me		: LeaderRobot($team : teamName)
		$mr		: MessageReceived(
							data instanceof AddedToMyPoolLeader,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
    $me.getLogger().info("I have added to the pool leader of "+$sender+".");
 	delete($mr);
end




//==================================================================================
// Victim saving
//----------------------------------------------------------------------------------
rule "Receive I have no energy message"
    when
       //soy un lider.
       $me	: LeaderRobot($teamLeaders : teamLeaders)
       $gm  : GoalMemory( $goals : goals)
       //he recibido un mensaje de solicitud de ayuda
       $mr  : MessageReceived(
							data instanceof IHaveNoEnergy,
							sender instanceof VictimRobot,
							$sender  : sender,
							$location : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
       //no he reconocido todavia a la victima.
       //not (exists ( TeamNegotiationToSaveVictim($sender==victim)))
    then
	   	$me.getLogger().info("Received help message from: "+$sender+", at location "+$location);
	   	// send ACK to victim
	   	SimpleTasksFactory.sendMessage($me,$sender,new IKnowYourState($uuid));
	 
	 	insert(new TeamNegotiationToSaveVictim($teamLeaders.size(),(VictimRobot)$sender,NegotiationStatus.NOT_STARTED));
	
	 	// Creo el objetivo de ayudar a la victima.
	   	HelpVictim hv = new HelpVictim((VictimRobot)$sender);
	   	// Lo inserto como hecho.
	   	insert(hv);
	   	// Lo aÃ±ado como objetivo.
	   	$gm.addGoal(hv);
	   	// Borro el mensaje.
	   	delete($mr);
end







rule "Negotiation save victim not started"
    when
       //Soy un lider.
       $me	: LeaderRobot($teamLeaders: teamLeaders )

		$tnl : TeamNegotiationToSaveVictim(
					$victim : victim,
					nResponse>0,
					status==NegotiationStatus.NOT_STARTED)
       $gm : GoalMemory( )
       //Exite un objetivo que es ayudar a la victima y esta pendiente.
       $kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.PENDING ) from $gm.goals
     then
		String uuid=UUID.randomUUID().toString();
	   	$me.getLogger().info("Sending save victim negotiation terms.");
	   	SimpleTasksFactory.sendMessageMultiples($me,$teamLeaders, 
	   		new SaveVictimNegotiationTerms(
	   		new NegotiationTerms($me.getFloatBestIdleAgent($victim),$victim),uuid));	
	   	modify($tnl){setStatus(NegotiationStatus.WAITING_FOR_RESPONSE)}
end


rule "I receive one message about victim negotiation. $tr<bestEva"
	when
       	$me	: LeaderRobot()
       	$mr		: MessageReceived(
					data instanceof SaveVictimNegotiationTerms,
					sender instanceof RobotAgent,
					$sender  : sender,
					$tr : data.info,
					$uuid : data.uuid
 				) from entry-point MESSAGING	
		$tnl : TeamNegotiationToSaveVictim(
       				bestEva>$tr.getValue(),
					$victim : victim,
					$victim == $tr.getVictim(),
					status==NegotiationStatus.WAITING_FOR_RESPONSE)
		eval($tr.getValue()>-1)
	then
			$me.getLogger().info("Nueva mejor");
	
		$tnl.setBestEva($tr.getValue());
		modify($tnl){setNResponse(1)}
	   	delete($mr);		
end


rule "I receive one message about victim negotiation. $tr<bestEva   FIX"
	when
       	$me	: LeaderRobot()
       	$mr		: MessageReceived(
					data instanceof SaveVictimNegotiationTerms,
					sender instanceof RobotAgent,
					$sender  : sender,
					$tr : data.info,
					$uuid : data.uuid
 				) from entry-point MESSAGING	
		$tnl : TeamNegotiationToSaveVictim(
       				$b	:	bestEva,
					$victim : victim,
					$victim == $tr.getVictim(),
					status==NegotiationStatus.WAITING_FOR_RESPONSE)
		eval($b==-1)
	then
		$me.getLogger().info("Nueva mejor 2");
	
		$tnl.setBestEva($tr.getValue());
		modify($tnl){setNResponse(1)}
	   	delete($mr);		
end





rule "I receive one message about victim negotiation. bestEva<Nueva valoracion."
	when
	   	//Soy un lider.
       	$me	: LeaderRobot()
       	//He recibido una valoracion para una tarea de rescate.
       	$mr		: MessageReceived(
					data instanceof SaveVictimNegotiationTerms,
					sender instanceof RobotAgent,
					$sender  : sender,
					$tr : data.info,
					$uuid : data.uuid
 				) from entry-point MESSAGING	
		$tnl : TeamNegotiationToSaveVictim(
       				$b :	bestEva,
       				bestEva<$tr.getValue(),
					$victim : victim,
					$victim == $tr.getVictim(),
					
					status==NegotiationStatus.WAITING_FOR_RESPONSE)
		eval($b>-1)
	then
		$me.getLogger().info("Mia mejor");
	
		modify($tnl){setNResponse(1)}
	   	delete($mr);		
end


rule "I receive one message about victim negotiation. -1"
	when
	   	//Soy un lider.
       	$me	: LeaderRobot()
       	//He recibido una valoracion para una tarea de rescate.
       	$mr		: MessageReceived(
					data instanceof SaveVictimNegotiationTerms,
					sender instanceof RobotAgent,
					$sender  : sender,
					$tr : data.info,
					$uuid : data.uuid
 				) from entry-point MESSAGING	
		
		$tnl : TeamNegotiationToSaveVictim(
       				$victim : victim,
   					$victim == $tr.getVictim(),
       				
					status==NegotiationStatus.WAITING_FOR_RESPONSE)
		eval($tr.getValue()==-1)
	then
		$me.getLogger().info("-1");
	
		modify($tnl){setNResponse(1)}
	   	delete($mr);		
end






rule "Save victim?? Yes"
	when
       $gm : GoalMemory( )
       $me	: LeaderRobot($teamLeaders: teamLeaders )
       $tnl : TeamNegotiationToSaveVictim(
					$victim : victim,
					$be : bestEva,
					nResponse<=0
					)
       
		eval($me.getFloatBestIdleAgent($victim)>-1)
       	eval($be==-1 || $be>$me.getFloatBestIdleAgent($victim))
       
		$kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.PENDING ) from $gm.goals
       					
   	  	not (exists ( VictimAssignedToSubordinate($me.getBestIdleAgent($victim) == subordinate)))		
     then
    	RobotAgent s =	$me.getBestIdleAgent($victim);
	   	
	   	String uuid=UUID.randomUUID().toString();
		SimpleTasksFactory.sendMessage($me,s,new SaveVictim($victim,uuid));
		
		insert(new VictimAssignedToSubordinate($victim, s));
		
		delete($tnl);
  	   	
  	   	modify($kmt){ setGoalState( AgentGoal.SOLVING ) }	  
end




rule "Save victim?? No"
	when
       $gm : GoalMemory( )
       $me	: LeaderRobot($teamLeaders: teamLeaders )
       $tnl : TeamNegotiationToSaveVictim(
					$victim : victim,
					$be : bestEva,
					bestEva>-1,
					nResponse<=0,
					status==NegotiationStatus.WAITING_FOR_RESPONSE)       
       	eval($be<$me.getFloatBestIdleAgent($victim))
		$kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.PENDING ) from $gm.goals
     then
		delete($tnl);  	   	
  	   	modify($kmt){ setGoalState( AgentGoal.SOLVED ) }	  
end


rule "Save victim?? Pending"
	when
       $gm : GoalMemory( )
       $me	: LeaderRobot($teamLeaders: teamLeaders )
       $tnl : TeamNegotiationToSaveVictim(
					$victim : victim,
					$be : bestEva,
					nResponse<=0
					)       
       	eval($me.getFloatBestIdleAgent($victim)==-1)
       	eval($be==-1)
		$kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.PENDING ) from $gm.goals
     then
		delete($tnl);  	   	
end



rule "Receive notification about victim saved - PENDING GOAL"
    when
        $gm : GoalMemory( )
    
       	$me	: LeaderRobot($teamLeaders : teamLeaders)
       	$mr	: MessageReceived(
							data instanceof VictimSaved,
							$sender : sender instanceof RobotAgent,
							$victim : data.info
     						) from entry-point MESSAGING					
     	$vas : VictimAssignedToSubordinate(victim == $victim)
     	
     	$kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.SOLVING ) from $gm.goals
     	
     	
     	
     	$kmt2 : HelpVictim ( $victim2 : goalData, 
       					goalState  == AgentGoal.PENDING ) from $gm.goals
    then
	 	insert(new TeamNegotiationToSaveVictim($teamLeaders.size(),(VictimRobot)$victim2,NegotiationStatus.NOT_STARTED));
   	  	modify($kmt){ setGoalState( AgentGoal.SOLVED ) }	
	   	delete($mr);
	   	delete($vas);
end



rule "Receive notification about victim saved - NO PENDING GOAL"
    when
        $gm : GoalMemory( )
    
       $me	: LeaderRobot()
       $mr	: MessageReceived(
							data instanceof VictimSaved,
							$sender : sender instanceof RobotAgent,
							$victim : data.info
     						) from entry-point MESSAGING
     						
     	$vas : VictimAssignedToSubordinate(victim == $victim)
     	$kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.SOLVING ) from $gm.goals
       	not(exists(HelpVictim (goalState  == AgentGoal.PENDING ) from $gm.goals))
    then
		modify($kmt){ setGoalState( AgentGoal.SOLVED ) }	
	   	delete($mr);
	   	delete($vas);
end