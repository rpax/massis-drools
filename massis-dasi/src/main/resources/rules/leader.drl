//created on: Apr 11, 2016
package com.massisframework.massis.dasi.apps.robots.leader

//std imports
import java.util.*;
import java.util.logging.Logger;
import java.util.concurrent.*;
import com.massisframework.massis.dasi.lowlevel.LowLevelInfo;
import com.massisframework.massis.dasi.agents.tasks.AgentTask;
import com.massisframework.massis.dasi.agents.tasks.SimpleTasksFactory;
import com.massisframework.massis.dasi.events.messages.MessageReceived;
import com.massisframework.massis.dasi.agents.goals.*;
import com.massisframework.massis.dasi.agents.goals.AgentGoal.GoalState;
//robots
import com.massisframework.massis.dasi.apps.robots.*;
import com.massisframework.massis.dasi.apps.robots.messages.*;
import com.massisframework.massis.dasi.apps.robots.messages.getHelp.*;
import com.massisframework.massis.dasi.apps.robots.messages.knowTeam.*;
import com.massisframework.massis.dasi.apps.robots.messages.orders.*;
import com.massisframework.massis.dasi.apps.robots.messages.saveVictimNegotiation.*;
//leader
import com.massisframework.massis.dasi.apps.robots.leader.info.TermNegotiation.NegotiationStatus;
import com.massisframework.massis.dasi.apps.robots.leader.*;
import com.massisframework.massis.dasi.apps.robots.leader.info.*;
import com.massisframework.massis.dasi.apps.robots.leader.goals.*;
//subordinate
import com.massisframework.massis.dasi.apps.robots.subordinate.SubordinateRobot
import com.massisframework.massis.dasi.apps.robots.subordinate.info.IdleSubordinate;
//victim
import com.massisframework.massis.dasi.apps.robots.victim.VictimRobot;
//declare any global variables here

//=============================================================================
// Goal selection
//-----------------------------------------------------------------------------
rule "Generate Goal Memory"
	when
		not GoalMemory(  )
 	then
  		insert(new GoalMemory());
end

rule "Add know my team goal if not present"	
	when
		$gm : GoalMemory( $goals : goals , containsGoalByClass(KnowMyTeam.class)==false)
 	then
 		KnowMyTeam kmt = new KnowMyTeam();
 		insert(kmt);
  	    $gm.addGoal(kmt);
end


//=============================================================================
// Team negotiation rules
//-----------------------------------------------------------------------------
// Goal Trigger
rule "If I dont know my team : The current goal changes."
	when
		$me  : LeaderRobot($team : teamName)
		$gm  : GoalMemory()
		$kmt : KnowMyTeam ( goalState  == GoalState.PENDING ) from $gm.goals
 	then
 	   String uuid=UUID.randomUUID().toString();
 	   SimpleTasksFactory.sendMessage($me,new HiTeam($team,uuid));
  	   modify($kmt){ setGoalState( GoalState.SOLVED ) }	   
end


rule "Received HiTeamResponseMember"
	when
		$me		: LeaderRobot()
		$mr		: MessageReceived(
							data instanceof HiTeamResponseMember,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
 	  $me.getLogger().info("Adding "+$sender+" to my pool TeamMembers.");
 	  SimpleTasksFactory.sendMessage($me,$sender,new YouArePartOfMyTeam("1",$uuid));
 	  modify($me){ addTeamMember((RobotAgent)$sender)}
 	  delete($mr);
end

rule "Received HiTeamResponseLeader"
	when
		$me		: LeaderRobot()
		$mr		: MessageReceived(
							data instanceof HiTeamResponseLeader,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
 	  $me.getLogger().info("Adding "+$sender+" to my pool Leader.");
 	  SimpleTasksFactory.sendMessage($me,$sender,new AddedToMyPoolLeader("1",$uuid));
 	  modify($me){ addTeamLeader((RobotAgent)$sender)}
 	  delete($mr);
end

rule "Received HiTeam"
	when
		$me		: LeaderRobot($team : teamName)
		$mr		: MessageReceived(
							data instanceof HiTeam,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
     	not(eval($team==$info))
 	then
 	  $me.getLogger().info("I received a HiTeam message of "+$sender+".");
 	  SimpleTasksFactory.sendMessage($me,$sender,new HiTeamResponseLeader($team,$uuid));
 	  delete($mr);
end


rule "AddedToPoolLeader"
	when
		$me		: LeaderRobot($team : teamName)
		$mr		: MessageReceived(
							data instanceof AddedToMyPoolLeader,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
    $me.getLogger().info("I have added to the pool leader of "+$sender+".");
 	delete($mr);
end




//==================================================================================
// Victim saving
//----------------------------------------------------------------------------------
rule "Create victims queue"
	when
		not(PendingVictims())
	then
		insert(new PendingVictims());
end


rule "Receive I have no energy message"
    when
       //soy un lider.
       $me	: LeaderRobot()
       $gm  : GoalMemory( $goals : goals)
       //he recibido un mensaje de solicitud de ayuda
       $mr  : MessageReceived(
							data instanceof IHaveNoEnergy,
							sender instanceof VictimRobot,
							$sender  : sender,
							$location : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
       //no he reconocido todavia a la victima.
       not (exists( VictimToSave( $sender ==  victim)))
    then
	   $me.getLogger().info("Received help message from: "+$sender+", at location "+$location);
	   // send ACK to victim
	   SimpleTasksFactory.sendMessage($me,$sender,new IKnowYourState($uuid));
	 
	   // Reconozco a la victima.
	   insert(new VictimToSave((VictimRobot)$sender));
	   // Creo el objetivo de ayudar a la victima.
	   HelpVictim hv = new HelpVictim((VictimRobot)$sender);
	   // Lo inserto como hecho.
	   insert(hv);
	   // Lo añado como objetivo.
	   $gm.addGoal(hv);
	   // Borro el mensaje.
	   delete($mr);
end


rule "Pending victim queued"
	when
       //soy un lider.
       $me	: LeaderRobot( )
       $pendingVs : PendingVictims( $vts : getFirstPendingVictim() )
       $gm  : GoalMemory( $goals : goals)
       $idle : IdleSubordinate()
       //hay una victima en la cola.
       eval($pendingVs.isThereAPendingVictim()==true)
    then
	   $me.getLogger().info("Helping pending victim" + $vts.getVictim());
	   // Meto a la victima en la base de hechos.
	   insert($vts);
	   // Creo el objetivo de ayudar a la victima.
	   HelpVictim hv = new HelpVictim((VictimRobot)$vts.getVictim());
	   // Lo inserto como hecho.
	   insert(hv);
	   // Lo añado como objetivo.
	   $gm.addGoal(hv);
	   // El subordinado no esta libre
	   delete($idle);
	    //Quito la victima de la cola
	   $pendingVs.consumePendingVictim();
	   System.out.println("QUITANDO VICTIMA DE LA COLA");
end


rule "Only one team - Save victim"
	when
       $gm : GoalMemory( )
       //Soy un lider.
       $me	: LeaderRobot($teamLeaders: teamLeaders )
       //No hay mas lideres en el campo.
       eval($teamLeaders.size()<=0)
       //Se ha reconocido la victima
       $vR : VictimToSave($v : victim)
       //Hay algun rescatador ocioso
       eval($me.isThereAnIdleAgent()==true)
       //Mi evaluacion para el rescate es que es probable.
       eval($me.getFloatBestIdleAgent($vR)>-1)
       //Existe un objetivo en estado pendiente para rescatar a esta victima.
       $kmt : HelpVictim ( $v == goalData, 
       					goalState  == GoalState.PENDING ) from $gm.goals
     then
       $me.getLogger().info("My team is the better choice to rescue "+$v+" because there is only one team.");
	   $me.getLogger().info("Agent "+$me.getBestIdleAgent($vR)+" have been selected to the rescue.");
	   String uuid=UUID.randomUUID().toString();
   	   //Mando una orden de rescate al agente con mejor evaluacion para que rescate al agente en cuestion.
   	   SimpleTasksFactory.sendMessage($me,$me.getBestIdleAgent($vR),new SaveVictim($v,uuid));
   	   //Inserto el hecho de que se ha asignado la victima a un rescatador.
   	   insert(new VictimAssignedToSubordinate($vR));
	   //Borro el hecho de que existe una victima con necesidad de rescate.
	   delete($vR);
  	   modify($kmt){ setGoalState( GoalState.SOLVED ) }
  	   	  
end


rule "Only one team - Save victim - No idle worker"
	when
       $gm : GoalMemory( )
       $pendingVs : PendingVictims( )
       //Soy un lider.
       $me	: LeaderRobot($teamLeaders: teamLeaders )
       //No hay mas lideres en el campo.
       eval($teamLeaders.size()<=0)
       //Se ha reconocido la victima
       $vR : VictimToSave($v : victim)
       //Hay algun rescatador ocioso
       eval($me.isThereAnIdleAgent()==false)
       //Existe un objetivo en estado pendiente para rescatar a esta victima.
       $kmt : HelpVictim ( $v == goalData, 
       					goalState  == GoalState.PENDING ) from $gm.goals
     then
       $me.getLogger().info("There are no agents to rescue "+$v+".");
  	   //Instertamos la victima pendiente en la cola
  	   modify($pendingVs){ addPendingVictim($vR) }
  	   //Borramos el hecho
  	   delete($vR);
  	   //Borramos la intencion de rescatarla, ya recuperaremos luego la intencion,
  	   // puede que la acabe rescatando otro equipo
  	   modify($kmt){ setGoalState( GoalState.SOLVED ) }
  	   System.out.println("SOLO UN EQUIPO - sin trabajadores ocupados");
end


//Existe una victima a rescatar pero no existen terminos de negociacion.
//Se crean los terminos y se anuncia una propuesta de rescaste al resto de equipos.
rule "Negotiation save victim not created"
    when
       //Soy un lider.
       $me	: LeaderRobot($teamLeaders: teamLeaders )
       //Existe una victima con necesidad de rescate.
       $vR : VictimToSave($v : victim)
       //No existe la negociacion.
       not (exists ( TeamNegotiationToSaveVictim($v==victim)))
       //Hay mas lideres en el campo, por lo tanto es necesario evaluar la situacion en consenso.
       eval($teamLeaders.size()>0)
       $gm : GoalMemory( )
       //Exite un objetivo que es ayudar a la victima y esta pendiente.
       $kmt : HelpVictim ( $v == goalData, 
       					goalState  == GoalState.PENDING ) from $gm.goals
     then
		insert(new TeamNegotiationToSaveVictim($teamLeaders.size(),$vR,NegotiationStatus.NOT_STARTED));
		delete($vR);
end



rule "Negotiation not started."
	when
	    //Soy un lider.
        $me	: LeaderRobot( $teamLeaders : teamLeaders )
		//Existe una negociacion pero no se ha iniciado.
		$tnl : TeamNegotiationToSaveVictim(
					$victim : victim,
					status==NegotiationStatus.NOT_STARTED)
	then
		String uuid=UUID.randomUUID().toString();
	   	$me.getLogger().info("Sending save victim negotiation terms.");
	   	//Mandar a todos los lideres la peticion de negociacion, junto a la valoracion de la tarea.
	   	SimpleTasksFactory.sendMessageMultiples($me,$teamLeaders, 
	   		new SaveVictimNegotiationTerms($me.getFloatBestIdleAgent($victim),uuid));	
	   	//La negociacion pasa a estar en espera.
		modify($tnl){setStatus(NegotiationStatus.WAITING_FOR_RESPONSE)}
end




//Recibo una propuesta que es peor que la mia
rule "I win part of the match."
	when
	   	//Soy un lider.
       	$me	: LeaderRobot()
       	//He recibido una valoracion para una tarea de rescate.
       	$mr		: MessageReceived(
					data instanceof SaveVictimNegotiationTerms,
					sender instanceof RobotAgent,
					$sender  : sender,
					$tr : data.info,
					$uuid : data.uuid
 				) from entry-point MESSAGING
		
       	//Estoy esperando respuesta de la negociacion.
       	$tnl : TeamNegotiationToSaveVictim(
					$victim : victim,
					status==NegotiationStatus.WAITING_FOR_RESPONSE)
	    //Mi valoracion es mejor que la que he recibido.
	    eval($me.getFloatBestIdleAgent($victim)<$tr)
	then
		//Mi equipo gana una ronda.
		$me.getLogger().info("My team win one match.");
		//Solicito al lider que me ha mandado esta valoracion que cese de evaluar esta tarea, puesto yo tengo
		//mejor valoracion que el.
		String uuid=UUID.randomUUID().toString();
	   	SimpleTasksFactory.sendMessage($me,$sender,new DelTeamNegotiation($tnl,uuid));
		//Espero una respuesta menos.
		modify($tnl){setNResponse(1)}
	   
	   delete($mr);		
end


//Recibo una propuesta sin evaluacion. 
//Yo no tengo evaluacion pero me guardo el derecho de reiniciar la negociacion.
rule "No evaluation."
	when
		//Soy lider
       	$me	: LeaderRobot()
       	$pendingVs : PendingVictims( )
       	$gm : GoalMemory( )
       	//Estoy pendiente de salvar a la victima
       	$kmt : HelpVictim ($v : goalData, goalState  == GoalState.PENDING ) from $gm.goals
     	//No espero ninguna respuesta
		$tnl : TeamNegotiationToSaveVictim(
					nResponse == 0,
					$vi : victim,
					$vi.getVictim() == $v,
					status==NegotiationStatus.WAITING_FOR_RESPONSE)	
		//Mi evaluacion es tambien "imposible"
		eval($me.getFloatBestIdleAgent($vi)==-1)		
	then
	   	$me.getLogger().info("All agents are busy. Restarting actions to obtain time based solution.");
	   	//Elimino el objetivo.
	   	 modify($kmt){ setGoalState( GoalState.SOLVED ) }
		//Elimino el hecho.
		//delete($kmt);
		//Elimino la negociacion.
		delete($tnl);
		//Introduzco de nuevo que existe una victima que salvar.
		//insert(new VictimToSave( (RobotAgent)$v));
		 modify($pendingVs){ addPendingVictim( new VictimToSave( (RobotAgent)$v ) ) }
		
		update($gm);		
end


//Recibo que he perdido en la evaluacion de la negociacion.
rule "I lose the match."
	when
		//Soy lider.
       	$me	: LeaderRobot()
       	
       	$gm  : GoalMemory()
       	//Estoy esperando respuesta.
       	$tnl : TeamNegotiationToSaveVictim(
       			 $nresponse: nResponse>0,
       			 $victim : victim,
       			 status==NegotiationStatus.WAITING_FOR_RESPONSE)
		//Recibo mensaje de que he perdido la evaluacion.
   		$mr	: MessageReceived(
				data instanceof DelTeamNegotiation,
				sender instanceof RobotAgent,
				$sender  : sender,
				$tr : data.info,
				$uuid : data.uuid
 			) from entry-point MESSAGING
 		//Tengo como objetivo ayudar a la victima.
 		$kmt : HelpVictim ( 
 				$victim.getVictim()==goalData,
 				goalState  == GoalState.PENDING ) from $gm.goals
 							
	then
	   $me.getLogger().info("My team loses the rescue contest "+$victim.getVictim()+".");	
	   //Borro todo mi conocimiento respecto a este problema.
	   delete($tnl);
	   delete($mr);
  	   $gm.getGoals().remove($kmt);
	   //delete($kmt);
	   //update($gm);
	   
end


rule "I win the match. - Order to Save Victim."
	when
       	$me	: LeaderRobot()
   		$gm  : GoalMemory()
       
	   	$tnl : TeamNegotiationToSaveVictim(
       			$victim : victim,
       			$nR : nResponse,
       			status==NegotiationStatus.WAITING_FOR_RESPONSE)
       	eval($nR<=0)
	   	$kmt : HelpVictim ( goalState  == GoalState.PENDING ) from $gm.goals
	   	not(eval($me.getFloatBestIdleAgent($victim)==-1))
	then
	   	$me.getLogger().info("My team is the better choice to rescue "+$victim+".");
	   	$me.getLogger().info("Agent "+$me.getBestIdleAgent($victim)+" have been selected to the rescue.");
	
	   	String uuid=UUID.randomUUID().toString();	
   	   	SimpleTasksFactory.sendMessage($me,$me.getBestIdleAgent($victim),new SaveVictim($victim.getVictim(),uuid));
   
   	   	insert(new VictimAssignedToSubordinate($victim));
	   
	   	delete($tnl);
  	   	modify($kmt){ setGoalState( GoalState.SOLVED ) }	   
end


rule "Receive notification about victim saved"
    when
       $me	: LeaderRobot()
       $pendingVs : PendingVictims( )
       eval($pendingVs.isThereAPendingVictim()==false)
       $mr	: MessageReceived(
							data instanceof VictimSaved,
							$sender : sender instanceof RobotAgent,
							$victim : data.info
     						) from entry-point MESSAGING
     						
     	$vas : VictimAssignedToSubordinate(victim == $victim)
    then
	   //Send task: Save victim
	   $me.getLogger().info("Received notification about victim saved. Adding by "+$sender+".");
	   delete($mr);
	   delete($vas);
end

rule "Receive notification about victim saved - Consume queue"
    when
       $me	: LeaderRobot(  )
       //hay una victima en la cola.
       $pendingVs : PendingVictims( )
       eval($pendingVs.isThereAPendingVictim()==true)
       $mr	: MessageReceived(
							data instanceof VictimSaved,
							$sender : sender instanceof RobotAgent,
							$victim : data.info
     						) from entry-point MESSAGING
     						
     	$vas : VictimAssignedToSubordinate(victim == $victim)
    then
	   //Send task: Save victim
	   $me.getLogger().info("Received notification about victim savedAdding by "+$sender+".");
	   delete($mr);
	   delete($vas);
	   insert(new IdleSubordinate());
end







