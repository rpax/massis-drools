//created on: Apr 11, 2016
package com.massisframework.massis.dasi.apps.robots.leader

//std imports
import java.util.*;
import java.util.logging.Logger;
import java.util.concurrent.*;
import com.massisframework.massis.dasi.lowlevel.LowLevelInfo;
import com.massisframework.massis.dasi.agents.tasks.AgentTask;
import com.massisframework.massis.dasi.agents.tasks.SimpleTasksFactory;
import com.massisframework.massis.dasi.events.messages.MessageReceived;
import com.massisframework.massis.dasi.agents.goals.*;
//robots
import com.massisframework.massis.dasi.apps.robots.*;
import com.massisframework.massis.dasi.apps.robots.messages.*;
import com.massisframework.massis.dasi.apps.robots.messages.getHelp.*;
import com.massisframework.massis.dasi.apps.robots.messages.goSafePoint.*;
import com.massisframework.massis.dasi.apps.robots.messages.knowTeam.*;
import com.massisframework.massis.dasi.apps.robots.messages.orders.*;
import com.massisframework.massis.dasi.apps.robots.messages.saveVictimNegotiation.*;
//leader
import com.massisframework.massis.dasi.apps.robots.leader.info.TermNegotiation.NegotiationStatus;
import com.massisframework.massis.dasi.apps.robots.leader.*;
import com.massisframework.massis.dasi.apps.robots.leader.info.*;
import com.massisframework.massis.dasi.apps.robots.leader.goals.*;
//subordinate
import com.massisframework.massis.dasi.apps.robots.subordinate.SubordinateRobot;
//victim
import com.massisframework.massis.dasi.apps.robots.victim.VictimRobot;
//declare any global variables here

//=============================================================================
// Goal selection
//-----------------------------------------------------------------------------
rule "Generate Goal Memory"
	when
		not GoalMemory(  )
 	then
  		insert(new GoalMemory());
end

rule "Generate victims saved counter"
	when
		not VictimsSaved(  )
 	then
  		insert(new VictimsSaved());
end

rule "Generate victims discovered counter"
	when
		not VictimsDiscovered(  )
 	then
  		insert(new VictimsDiscovered());
end

rule "Add know my team goal if not present"	
	when
		$gm : GoalMemory( $goals : goals , containsGoalByClass(KnowMyTeam.class)==false)
 	then
 		KnowMyTeam kmt = new KnowMyTeam();
 		insert(kmt);
  	    $gm.addGoal(kmt);
end


//=============================================================================
// Team negotiation rules
//-----------------------------------------------------------------------------
// Goal Trigger
rule "If I dont know my team : The current goal changes."
	when
		$me  : LeaderRobot($team : teamName)
		$gm  : GoalMemory()
		$kmt : KnowMyTeam ( goalState  == AgentGoal.PENDING ) from $gm.goals
 	then
  	   $me.info("If I dont know my team : The current goal changes.", "titulo");
 	   $me.info("No conozco mi equipo.", "info");
 	   String uuid=UUID.randomUUID().toString();
 	   $me.info("Envio mensaje a todos los robots registrados en la simulacion.", "envio");
 	   SimpleTasksFactory.sendMessage($me,new HiTeam($team,uuid));
  	   modify($kmt){ setGoalState( AgentGoal.SOLVED ) }	   
end


rule "Received HiTeamResponseMember"
	when
		$me		: LeaderRobot()
		$mr		: MessageReceived(
							data instanceof HiTeamResponseMember,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
 	  $me.info("Received HiTeamResponseMember.", "titulo");
 	  $me.info("He añadido a "+$sender+" a mi pool de miembros de mi equipo.", "info");
 	  $me.info("Le voy a comunicar que ha sido añadido.", "mensaje");
 	  SimpleTasksFactory.sendMessage($me,$sender,new YouArePartOfMyTeam("1",$uuid));
 	  modify($me){ addTeamMember((RobotAgent)$sender)}
 	  delete($mr);
end

rule "Received HiTeamResponseLeader"
	when
		$me		: LeaderRobot()
		$mr		: MessageReceived(
							data instanceof HiTeamResponseLeader,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
 	 	$me.info("Received HiTeamResponseLeader.", "titulo");
 	
 	  	$me.info("He añadido a "+$sender+" a mi pool de lideres de equipo.", "info");
 	  	$me.info("Le voy a comunicar que ha sido añadido.", "mensaje");
 	  	SimpleTasksFactory.sendMessage($me,$sender,new AddedToMyPoolLeader("1",$uuid));
 	  	modify($me){ addTeamLeader((RobotAgent)$sender)}
 	  	delete($mr);
end

rule "Received HiTeam"
	when
		$me		: LeaderRobot($team : teamName)
		$mr		: MessageReceived(
							data instanceof HiTeam,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
     	not(eval($team==$info))
 	then
  	 	$me.info("Received HiTeam.", "titulo");
 		$me.info("He recibido un mensaje de Hola de "+$sender+".", "info");
 		$me.info("Le voy a comunicar que soy un lider.", "mensaje");
 	  	SimpleTasksFactory.sendMessage($me,$sender,new HiTeamResponseLeader($team,$uuid));
 	  	delete($mr);
end


rule "AddedToPoolLeader"
	when
		$me		: LeaderRobot($team : teamName)
		$mr		: MessageReceived(
							data instanceof AddedToMyPoolLeader,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then  	 	
 		$me.info("AddedToPoolLeader.", "titulo");
    	$me.info($sender+" me ha añadido a su pool de lideres de equipo.", "info");
 	  	delete($mr);
end




//==================================================================================
// Victim saving
//----------------------------------------------------------------------------------
rule "Receive I have no energy message. Victim unknown"
    when
       $vsd : VictimsDiscovered()
       $me	: LeaderRobot($teamLeaders : teamLeaders)
       $gm  : GoalMemory( $goals : goals)
       $mr  : MessageReceived(
							data instanceof IHaveNoEnergy,
							sender instanceof VictimRobot,
							$sender  : sender,
							$location : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
     	not(VictimKnown(victim==((VictimRobot)$sender)))
 	then
	   	$me.info("Receive I have no energy message. Victim unknown", "titulo");
    	$me.info("Recibida solicitud de ayuda de "+$sender+" en el punto "+$location, "info");
    	$me.info("Nueva victima "+$sender+" .Descubiertas: "+($vsd.getNumDiscovered()+1), "info");
 	  	$me.info("Envio de ACK a "+$sender+".", "envio");
	   	SimpleTasksFactory.sendMessage($me,$sender,new IKnowYourState($uuid));
	 
	 	insert(new TeamNegotiationToSaveVictim($teamLeaders.size(),(VictimRobot)$sender,NegotiationStatus.NOT_STARTED));
	
		insert(new VictimKnown((VictimRobot)$sender));
		modify($vsd){increaseNumDiscovered()}
	
	   	HelpVictim hv = new HelpVictim((VictimRobot)$sender);
	   	insert(hv);
	   	$gm.addGoal(hv);
	   	delete($mr);
end

rule "Receive I have no energy message. Victim already known"
    when
       $vsd : VictimsDiscovered()
       $me	: LeaderRobot($teamLeaders : teamLeaders)
       $gm  : GoalMemory( $goals : goals)
       $mr  : MessageReceived(
							data instanceof IHaveNoEnergy,
							sender instanceof VictimRobot,
							$sender  : sender,
							$location : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
		$vck : VictimKnown(victim==(VictimRobot)$sender)
 	then
	   	$me.info("Receive I have no energy message. Victim already known", "titulo");
    	$me.info("Recibida solicitud de ayuda de "+$sender+" en el punto "+$location, "info");
 	  	$me.info("Envio de ACK a "+$sender+".", "envio");
	   	SimpleTasksFactory.sendMessage($me,$sender,new IKnowYourState($uuid));
	 
	 	insert(new TeamNegotiationToSaveVictim($teamLeaders.size(),(VictimRobot)$sender,NegotiationStatus.NOT_STARTED));
	
	   	HelpVictim hv = new HelpVictim((VictimRobot)$sender);
	   	insert(hv);
	   	$gm.addGoal(hv);
	   	delete($mr);
end







rule "Negotiation save victim not started"
    when
       //Soy un lider.
       $me	: LeaderRobot($teamLeaders: teamLeaders )

		$tnl : TeamNegotiationToSaveVictim(
					$victim : victim,
					nResponse>0,
					status==NegotiationStatus.NOT_STARTED)
       $gm : GoalMemory( )
       //Exite un objetivo que es ayudar a la victima y esta pendiente.
       $kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.PENDING ) from $gm.goals
     then
		String uuid=UUID.randomUUID().toString();
	   	$me.info("Negotiation save victim not started.", "titulo");
    	$me.info("Envio broadcast a todos los lideres para que tramiten la evaluacion de la victima "+$victim+".", "envio");
	   	SimpleTasksFactory.sendMessageMultiples($me,$teamLeaders, 
	   		new SaveVictimNegotiationTerms(
	   		new NegotiationTerms($me.getFloatBestIdleAgent($victim),$victim),uuid));	
   	    $me.info("Paso a esperar respuesta.", "info");
	   	modify($tnl){setStatus(NegotiationStatus.WAITING_FOR_RESPONSE)}
end


rule "I receive one message about victim negotiation. $tr<bestEva"
	when
       	$me	: LeaderRobot()
       	$mr		: MessageReceived(
					data instanceof SaveVictimNegotiationTerms,
					sender instanceof RobotAgent,
					$sender  : sender,
					$tr : data.info,
					$uuid : data.uuid
 				) from entry-point MESSAGING	
		$tnl : TeamNegotiationToSaveVictim(
       				$b : bestEva,
       				//bestEva>$tr.getValue(),
					$victim : victim,
					$victim == $tr.getVictim(),
					status==NegotiationStatus.WAITING_FOR_RESPONSE)
		eval( ($b > $tr.getValue() && $tr.getValue()>-1) || $b == -1)
	then
		$me.info("I receive one message about victim negotiation. $tr<bestEva", "titulo");
    	$me.info("He recibido una valoracion que es mejor que cualquiera que haya recibido antes para la victima "+$victim+".", "info");
   		$tnl.setBestEva($tr.getValue());
		modify($tnl){setNResponse(1)}
	   	delete($mr);		
end





rule "I receive one message about victim negotiation. bestEva<Nueva valoracion."
	when
	   	//Soy un lider.
       	$me	: LeaderRobot()
       	//He recibido una valoracion para una tarea de rescate.
       	$mr		: MessageReceived(
					data instanceof SaveVictimNegotiationTerms,
					sender instanceof RobotAgent,
					$sender  : sender,
					$tr : data.info,
					$uuid : data.uuid
 				) from entry-point MESSAGING	
		$tnl : TeamNegotiationToSaveVictim(
       				$b :	bestEva,
       				bestEva<$tr.getValue(),
					$victim : victim,
					$victim == $tr.getVictim(),
					
					status==NegotiationStatus.WAITING_FOR_RESPONSE)
		eval(($b>-1 && $b<$tr.getValue())|| $tr.getValue()==-1)
	then
		$me.info("I receive one message about victim negotiation. bestEva<Nueva valoracion.", "titulo");
    	$me.info("He recibido una nueva valoracion para la victima "+$victim+" pero es peor que la mejor que he recibido.", "info");
		modify($tnl){setNResponse(1)}
	   	delete($mr);		
end






rule "Save victim?? Yes"
	when
       $gm : GoalMemory( )
       $me	: LeaderRobot($teamLeaders: teamLeaders )
       $tnl : TeamNegotiationToSaveVictim(
					$victim : victim,
					$be : bestEva,
					nResponse<=0
					)
       
		eval($me.getFloatBestIdleAgent($victim)>-1)
       	eval($be==-1 || $be>$me.getFloatBestIdleAgent($victim))
       
		$kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.PENDING ) from $gm.goals
       					
   	  	not (exists ( VictimAssignedToSubordinate($me.getBestIdleAgent($victim) == subordinate)))		
     then
    	$me.info("Save victim?? Yes", "titulo");
    	$me.info("Mi equipo tiene la mejor valoracion para "+$victim+".", "info");
		
    	RobotAgent s =	$me.getBestIdleAgent($victim);
	   	String uuid=UUID.randomUUID().toString();
		SimpleTasksFactory.sendMessage($me,s,new SaveVictim($victim,uuid));

		$me.info("El robot "+s+" tiene la tarea de rescatar a "+$victim+".", "envio");
		
		insert(new VictimAssignedToSubordinate($victim, s));
		delete($tnl);
   	   	modify($kmt){ setGoalState( AgentGoal.SOLVING ) }	  
end




rule "Save victim?? No"
	when
       $gm : GoalMemory( )
       $me	: LeaderRobot($teamLeaders: teamLeaders )
       $tnl : TeamNegotiationToSaveVictim(
					$victim : victim,
					$be : bestEva,
					bestEva>-1,
					nResponse<=0,
					status==NegotiationStatus.WAITING_FOR_RESPONSE)       
       	eval($be<$me.getFloatBestIdleAgent($victim))
		$kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.PENDING ) from $gm.goals
     then
     	$me.info("Save victim?? No", "titulo");
    	$me.info("Mi equipo no tiene la mejor valoracion para "+$victim+" pero alguien puede asistirla.", "info");
		
		delete($tnl);  	   	
  	   	modify($kmt){ setGoalState( AgentGoal.SOLVED ) }	  
end


rule "Save victim?? Pending"
	when
       $gm : GoalMemory( )
       $me	: LeaderRobot($teamLeaders: teamLeaders )
       $tnl : TeamNegotiationToSaveVictim(
					$victim : victim,
					$be : bestEva,
					nResponse<=0
					)       
       	eval($me.getFloatBestIdleAgent($victim)==-1)
       	eval($be==-1)
		$kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.PENDING ) from $gm.goals
     then
     	$me.info("Save victim?? Pending", "titulo");
    	$me.info("Nadie puede rescatar por ahora a "+$victim+" este objetivo se mantiene pendiente.", "info");
		delete($tnl);  	   	
end





rule "Receive notification about victim saved - PENDING GOAL"
    when
        $gm : GoalMemory( )
    
       	$me	: LeaderRobot($teamLeaders : teamLeaders)
       	$mr	: MessageReceived(
							data instanceof VictimSaved,
							$sender : sender instanceof RobotAgent,
							$victim : data.info
     						) from entry-point MESSAGING					
     	$vas : VictimAssignedToSubordinate(victim == $victim)
     	
     	$kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.SOLVING ) from $gm.goals
     	
     	$kmt2 : HelpVictim ( $victim2 : goalData, 
       					goalState  == AgentGoal.PENDING ) from $gm.goals
		not(exists( TeamNegotiationToSaveVictim($victim2 == victim)))
     	
    then
    	$me.info("Receive notification about victim saved - PENDING GOAL", "titulo");
    	$me.info("He recibido una notificacion de rescate realizado, y tengo tareas pendientes de reevaluar.\n"+
    	"NO PROCESO LA ELIMINACION DEL MENSAJE TODAVIA.", "info");
	 	insert(new TeamNegotiationToSaveVictim($teamLeaders.size(),(VictimRobot)$victim2,NegotiationStatus.NOT_STARTED));
end



rule "Receive notification about victim saved - NO PENDING GOAL"
    when
        $gm : GoalMemory( )
    
       $me	: LeaderRobot()
       $mr	: MessageReceived(
							data instanceof VictimSaved,
							$sender : sender instanceof RobotAgent,
							$victim : data.info
     						) from entry-point MESSAGING
      	$vas : VictimAssignedToSubordinate(victim == $victim)
     	$kmt : HelpVictim ( $victim == goalData, 
       					goalState  == AgentGoal.SOLVING ) from $gm.goals
    then
    	$me.info("Receive notification about victim saved - PENDING GOAL", "titulo");
    	$me.info("Proceso la eliminacion del mensaje de tarea realizada y paso el objetivo a solucionado.", "info");
		modify($kmt){ setGoalState( AgentGoal.SOLVED ) }	
	   	delete($mr);
	   	delete($vas);
end


//==================================================================================
// Victim safe point managment
//----------------------------------------------------------------------------------
rule "Receive I want safe point location. I am the closest leader"
    when
       $me	: LeaderRobot($teamLeaders : teamLeaders)
       $gm  : GoalMemory( $goals : goals)
       $mr  : MessageReceived(
							data instanceof IWantSafePointLocation,
							sender instanceof VictimRobot,
							$sender  : sender,
							$location : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
        eval( $me.closestLeaderTo($location) == true )
 	then
	   	$me.info("Receive I want safe point location. I am the closest leader", "titulo");
    	$me.info("Recibida solicitud de safe point de "+$sender+" en el punto "+$location, "info");
 	  	$me.info("Envio de mi posicion a "+$sender+".", "envio");
	   	SimpleTasksFactory.sendMessage($me,$sender,new SafePointPosition($me.getLocation(), $uuid));
	   	
	   	delete($mr);
end

rule "Receive I want safe point location. I am not the closest leader"
    when
       $me	: LeaderRobot($teamLeaders : teamLeaders)
       $gm  : GoalMemory( $goals : goals)
       $mr  : MessageReceived(
							data instanceof IWantSafePointLocation,
							sender instanceof VictimRobot,
							$sender  : sender,
							$location : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
        eval( $me.closestLeaderTo($location) == false )
 	then
	   	$me.info("Receive I want safe point location. I am not the closest leader", "titulo");
    	$me.info("Recibida solicitud de safe point de "+$sender+" en el punto "+$location, "info");
	   	
	   	delete($mr);
end


rule "Receive Safe point reached."
    when
       $me	: LeaderRobot()
       $vs  : VictimsSaved()
       $vsd : VictimsDiscovered()
       $mr  : MessageReceived(
							data instanceof SafePointReached,
							sender instanceof VictimRobot,
							$sender  : sender,
							$location : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
	   	$me.info("Receive Safe Point Reached", "titulo");
    	$me.info("Recibida informacion de safe point alncanzado de "+$sender +"."+
    	         "Numero de victimas salvadas: " + ($vs.getNumSaved()+1) +
    	         " Numero de victimas descubiertas: " + ($vsd.getNumDiscovered()), "info");
	   	modify($vs){increaseNumSaved()}
	   	System.out.println($vs.getNumSaved()==$vsd.getNumDiscovered());
	   	delete($mr);
end


//==================================================================================
// Subordinate retreat
//----------------------------------------------------------------------------------

rule "All victims saved."
	when
		$vsd : VictimsDiscovered()
		$vs  : VictimsSaved()
		eval($vs.getNumSaved()==$vsd.getNumDiscovered())
		eval($vs.getNumSaved()>0)
		$gm : GoalMemory( $goals : goals , containsGoalByClass(RetreatSubordinates.class)==false)
		not(HelpVictim(goalState  == AgentGoal.PENDING))
		not(HelpVictim(goalState  == AgentGoal.SOLVING))
		$me	: LeaderRobot($teamMembers : teamMembers)
	then
		$me.info("All victims saved", "titulo");
    	$me.info("Todas las victimas salvadas", "info");
    	$me.info("Envio de orden de retirada a todos mis subordinados." + 
    			 "Numero de victimas salvadas: " + ($vs.getNumSaved()) +
    	         " Numero de victimas descubiertas: " + ($vsd.getNumDiscovered()), "envio");
    	System.out.println($vs.getNumSaved()==$vsd.getNumDiscovered());
    	
		String uuid=UUID.randomUUID().toString();
		SimpleTasksFactory.sendMessageMultiples($me,$teamMembers,new GoToLeader($me, uuid));
		
		RetreatSubordinates kmt = new RetreatSubordinates();
 		insert(kmt);
 		modify(kmt){ setGoalState( AgentGoal.SOLVING ) }
  	    modify($gm){addGoal(kmt)};
  	    
  	    insert(new SubordinatesReturned());
end

rule "Receive Subordinate retreatment ACK."
	when
		$gm : GoalMemory()
        $kmt : RetreatSubordinates ( goalState == AgentGoal.SOLVING )
		$me	: LeaderRobot($teamMembers : teamMembers)
		$mr  : MessageReceived(
							data instanceof ACKGoToLeader,
							sender instanceof SubordinateRobot,
							$sender  : sender,
							$subordinate : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
     	$sbr : SubordinatesReturned()
	then
		$me.info("Receive Subordinate retreatment ACK.", "titulo");
    	$me.info("He recibido un ack del subordinado" + $subordinate + ".", "info");
    	
    	delete($mr);
    	modify($sbr){ increaseNumReturned() }
end


rule "All subordinates ACK."
	when
		$gm : GoalMemory()
        $kmt : RetreatSubordinates ( goalState == AgentGoal.SOLVING )
		$me : LeaderRobot($teamMembers : teamMembers)
		$sbr  : SubordinatesReturned( getNumReturned()== $teamMembers.size() )
	then
		$me.info("Receive LAST Subordinate retreatment ACK.", "titulo");
    	$me.info("Todos los subordinados me an contestado.", "info");
	
		 modify($kmt){ setGoalState( AgentGoal.SOLVED ) }
end