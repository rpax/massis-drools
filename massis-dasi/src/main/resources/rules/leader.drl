//created on: Apr 11, 2016
package com.massisframework.massis.dasi.apps.robots.leader

//std imports
import java.util.*;
import java.util.logging.Logger;
import java.util.concurrent.*;
import com.massisframework.massis.dasi.lowlevel.LowLevelInfo;
import com.massisframework.massis.dasi.agents.tasks.AgentTask;
import com.massisframework.massis.dasi.agents.tasks.SimpleTasksFactory;
import com.massisframework.massis.dasi.events.messages.MessageReceived;
import com.massisframework.massis.dasi.agents.goals.*;
import com.massisframework.massis.dasi.agents.goals.AgentGoal.GoalState;
//robots
import com.massisframework.massis.dasi.apps.robots.*;
import com.massisframework.massis.dasi.apps.robots.messages.*;
import com.massisframework.massis.dasi.apps.robots.messages.getHelp.*;
import com.massisframework.massis.dasi.apps.robots.messages.knowTeam.*;
import com.massisframework.massis.dasi.apps.robots.messages.orders.*;
import com.massisframework.massis.dasi.apps.robots.messages.saveVictimNegotiation.*;
//leader
import com.massisframework.massis.dasi.apps.robots.leader.info.TermNegotiation.NegotiationStatus;
import com.massisframework.massis.dasi.apps.robots.leader.*;
import com.massisframework.massis.dasi.apps.robots.leader.info.*;
import com.massisframework.massis.dasi.apps.robots.leader.goals.*;
//subordinate
import com.massisframework.massis.dasi.apps.robots.subordinate.SubordinateRobot;
//victim
import com.massisframework.massis.dasi.apps.robots.victim.VictimRobot;
//declare any global variables here

//=============================================================================
// Goal selection
//-----------------------------------------------------------------------------
rule "Generate Goal Memory"
	when
		not GoalMemory(  )
 	then
  		insert(new GoalMemory());
end

rule "Add know my team goal if not present"	
	when
		$gm : GoalMemory( $goals : goals , containsGoalByClass(KnowMyTeam.class)==false)
 	then
 		KnowMyTeam kmt = new KnowMyTeam();
 		insert(kmt);
  	    $gm.addGoal(kmt);
end


//=============================================================================
// Team negotiation rules
//-----------------------------------------------------------------------------
// Goal Trigger
rule "If I dont know my team : The current goal changes."
	when
		$me  : LeaderRobot($team : teamName)
		$gm  : GoalMemory()
		$kmt : KnowMyTeam ( goalState  == GoalState.PENDING ) from $gm.goals
 	then
 	   String uuid=UUID.randomUUID().toString();
 	   SimpleTasksFactory.sendMessage($me,new HiTeam($team,uuid));
  	   modify($kmt){ setGoalState( GoalState.SOLVED ) }	   
end


rule "Received HiTeamResponseMember"
	when
		$me		: LeaderRobot()
		$mr		: MessageReceived(
							data instanceof HiTeamResponseMember,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
 	  $me.getLogger().info("Adding "+$sender+" to my pool TeamMembers.");
 	  SimpleTasksFactory.sendMessage($me,$sender,new YouArePartOfMyTeam("1",$uuid));
 	  modify($me){ addTeamMember((RobotAgent)$sender)}
 	  delete($mr);
end


rule "AddedToPoolLeader"
	when
		$me		: LeaderRobot($team : teamName)
		$mr		: MessageReceived(
							data instanceof AddedToMyPoolLeader,
							sender instanceof RobotAgent,
							$sender  : sender,
							$info : data.info,
 							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
    $me.getLogger().info("I have added to the pool leader of "+$sender+".");
 	delete($mr);
end




//==================================================================================
// Victim saving order
//----------------------------------------------------------------------------------
rule "Receive I have no energy message from BaseAgent"
    when
       //soy un lider.
       $me	: LeaderRobot()
       $gm  : GoalMemory( $goals : goals)
       $mr  : MessageReceived(
							data instanceof EvalVictim,
							sender instanceof BaseAgent,
							$sender  : sender,
							$victim : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
    then
	   	EvaluationResponse ev = new EvaluationResponse(
	   								new Evaluation($me.getBestIdleAgent($victim),
	   													$me.getFloatBestIdleAgent($victim)));
	  	SimpleTasksFactory.sendMessage($me,$sender,ev);
	   	delete($mr);
end


