//created on: Apr 11, 2016
package com.massisframework.massis.dasi.apps.robots.leader

//std imports
import java.util.*;
import java.util.logging.Logger;
import java.util.concurrent.*;
import com.massisframework.massis.dasi.lowlevel.LowLevelInfo;
import com.massisframework.massis.dasi.agents.tasks.AgentTask;
import com.massisframework.massis.dasi.agents.tasks.SimpleTasksFactory;
import com.massisframework.massis.dasi.events.messages.MessageReceived;
import com.massisframework.massis.dasi.agents.goals.*;
import com.massisframework.massis.dasi.agents.goals.AgentGoal.GoalState;
//robots
import com.massisframework.massis.dasi.apps.robots.*;
import com.massisframework.massis.dasi.apps.robots.commontasks.*;

import com.massisframework.massis.dasi.apps.robots.messages.*;
import com.massisframework.massis.dasi.apps.robots.messages.meeting.*;
import com.massisframework.massis.dasi.apps.robots.messages.SavingVictim.*;
import com.massisframework.massis.dasi.apps.robots.messages.getEvaluation.*;
//leader
import com.massisframework.massis.dasi.apps.robots.leader.*;
import com.massisframework.massis.dasi.apps.robots.leader.goals.*;
//subordinate
import com.massisframework.massis.dasi.apps.robots.subordinate.SubordinateRobot;
//victim
import com.massisframework.massis.dasi.apps.robots.victim.VictimRobot;
//base
import com.massisframework.massis.dasi.apps.robots.base.BaseAgent;

//declare any global variables here

//=============================================================================
// Goal selection
//-----------------------------------------------------------------------------
rule "Generate Goal Memory"
	when
		not GoalMemory(  )
 	then
  		insert(new GoalMemory());
end


//=============================================================================
// Conocer a todo el pool --- Equipo y Base
//-----------------------------------------------------------------------------
rule "No conozco a nadie"	
	when
		$gm : GoalMemory( $goals : goals , containsGoalByClass(KnowPool.class)==false)
 	then
 		KnowPool kmt = new KnowPool();
 		insert(kmt);
  	    $gm.addGoal(kmt);
end


rule "No conozco a nadie. Envio de mensajes."
	when
		$me  : LeaderRobot($team : teamName)
		$gm  : GoalMemory()
		$kmt : KnowPool ( goalState  == GoalState.PENDING ) from $gm.goals
 	then
 	   String uuid=UUID.randomUUID().toString();
 	   SimpleTasksFactory.sendMessage($me,new Hi($team,uuid));
  	   modify($kmt){ setGoalState( GoalState.SOLVED ) }	   
end


rule "No conozco a nadie. Recibo mensaje de Base."
	when
		$me		: LeaderRobot($bA	:	base)
		$mr		: MessageReceived(
							data instanceof Hi,
							sender instanceof BaseAgent,
							$sender  : sender,
							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
		modify($me){setBase((BaseAgent)$sender)}
		delete($mr);
end

rule "No conozco a nadie. Recibo mensaje de subordinado."
	when
		$me		: LeaderRobot($tM	:	teamMembers)
		$mr		: MessageReceived(
							data instanceof Hi,
							sender instanceof SubordinateRobot,
							$sender  : sender,
							$uuid : data.uuid
     						) from entry-point MESSAGING
 	then
		modify($me){addTeamMember((SubordinateRobot)$sender)}
		delete($mr);
end


//==================================================================================
// Victim saving order
//----------------------------------------------------------------------------------
rule "Recibida orden de evaluacion a victima de BaseAgent"
    when
       //soy un lider.
       $me	: LeaderRobot()
       $gm  : GoalMemory( $goals : goals)
       $mr  : MessageReceived(
							data instanceof EvalVictim,
							sender instanceof BaseAgent,
							$sender  : sender,
							$victim : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
    then
 	   	String uuid=UUID.randomUUID().toString();
    
	   	EvalVictimResponse ev = new EvalVictimResponse(
	   								new Evaluation($me.getBestIdleAgent($victim),
	   													$me.getFloatBestIdleAgent($victim)),uuid);
	  	SimpleTasksFactory.sendMessage($me,$sender,ev);
	   	delete($mr);
end




//=============================================================================
// Operational order negotiation rules
//-----------------------------------------------------------------------------

rule "Received save victim order"
    when
	  	$gm : GoalMemory( $goals : goals , containsGoalByClass(HelpVictim.class)==false)
	   	$me	: SubordinateRobot(idle == true)
       	$mr	:	MessageReceived(
				data instanceof SaveVictim,
				$victim : data.info
			) from entry-point MESSAGING
    then
	  	modify($me){setIdle(false)}
  		HelpVictim kmt = new HelpVictim((VictimRobot)$victim);
 		insert(kmt);
  	    $gm.addGoal(kmt);
	  	delete($mr);
end

rule "Save victim - approach"
    when	
		$gm  : GoalMemory()
		$kmt : HelpVictim ( 	goalData instanceof VictimRobot,
								$gD :	goalData,
		   					
							goalState  == GoalState.PENDING ) from $gm.goals
       	$me	:   SubordinateRobot()
       	LowLevelInfo( location.distance2D(((VictimRobot)$gD).getLocation())>1000)
    then
	  	AgentTask task = new MoveToTarget();
	  	task.execute($me,((VictimRobot)$gD).getLocation());
end



rule "Save victim - recharge"
    when
    	$gm  : GoalMemory()
	   	$kmt : HelpVictim ( $gD	:	goalData,
   								goalData instanceof VictimRobot,
	   	
	   					goalState  == GoalState.SOLVING ) from $gm.goals
       	$me	:   SubordinateRobot()
       	LowLevelInfo( location.distance2D(((VictimRobot)$gD).getLocation())<=1000)
    then
	  	((VictimRobot)$gD).setEnergy(1000);
	  	modify($me){setIdle(true)}
	  	String uuid=UUID.randomUUID().toString();
	  	SimpleTasksFactory.sendMessage($me,new VictimSaved((VictimRobot)$gD, uuid));
  	  	modify($kmt){ setGoalState( GoalState.SOLVED ) }	   
end
