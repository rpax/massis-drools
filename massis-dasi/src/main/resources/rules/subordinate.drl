//created on: Apr 11, 2016
package com.massisframework.massis.dasi.apps.robots.subordinate

//std imports
import java.util.*;
import java.util.concurrent.*;
import com.massisframework.massis.dasi.lowlevel.LowLevelInfo;
import com.massisframework.massis.dasi.agents.tasks.AgentTask;
import com.massisframework.massis.dasi.agents.tasks.SimpleTasksFactory;
import com.massisframework.massis.dasi.events.messages.MessageReceived;
import com.massisframework.massis.model.agents.LowLevelAgent;
import com.massisframework.massis.dasi.agents.goals.*;
import com.massisframework.massis.dasi.agents.goals.AgentGoal.GoalState;
import com.massisframework.massis.dasi.apps.robots.commontasks.*;

//robots
import com.massisframework.massis.dasi.apps.robots.*;

//Messages
import com.massisframework.massis.dasi.apps.robots.messages.*;
import com.massisframework.massis.dasi.apps.robots.messages.SavingVictim.*;
import com.massisframework.massis.dasi.apps.robots.messages.meeting.*;


//Subordinate
import com.massisframework.massis.dasi.apps.robots.subordinate.*;
import com.massisframework.massis.dasi.apps.robots.subordinate.info.*;
import com.massisframework.massis.dasi.apps.robots.subordinate.goals.*;


//Vicim
import com.massisframework.massis.dasi.apps.robots.victim.*;

//=============================================================================
// Goal selection
//-----------------------------------------------------------------------------
rule "Generate Goal Memory"
	when
		not GoalMemory(  )
 	then
  		insert(new GoalMemory());
end


//=============================================================================
// Team negotiation rules
//-----------------------------------------------------------------------------

rule "HiTeam message Received - It is my team."
	when
		$me   : SubordinateRobot($team: teamName)
		$mr : MessageReceived(
					data instanceof Hi,
					$sender  : sender,
					$team == data.info,
 					$uuid    :  data.uuid
     			) from entry-point MESSAGING
 	then
    	SimpleTasksFactory.sendMessage($me,$sender,new Hi($team, $uuid));
	  	delete($mr);
end




//=============================================================================
// Operational order negotiation rules
//-----------------------------------------------------------------------------

rule "Received save victim order"
    when
	  	$gm : GoalMemory( $goals : goals , containsGoalByClass(HelpVictim.class)==false)
	   	$me	: SubordinateRobot(idle == true)
       	$mr	:	MessageReceived(
				data instanceof SaveVictim,
				$victim : data.info
			) from entry-point MESSAGING
    then
	  	modify($me){setIdle(false)}
  		HelpVictim kmt = new HelpVictim((VictimRobot)$victim);
 		insert(kmt);
  	    $gm.addGoal(kmt);
	  	delete($mr);
end

rule "Save victim - approach"
    when	
		$gm  : GoalMemory()
		$kmt : HelpVictim ( $gD :	goalData,
							goalState  == GoalState.PENDING ) from $gm.goals
       	$me	:   SubordinateRobot()
       	LowLevelInfo( location.distance2D(((VictimRobot)$gD).getLocation())>1000)
    then
	  	AgentTask task = new MoveToTarget();
	  	task.execute($me,((VictimRobot)$gD).getLocation());
end



rule "Save victim - recharge"
    when
    	$gm  : GoalMemory()
	   	$kmt : HelpVictim ( $gD	:	goalData,
	   					goalState  == GoalState.SOLVING ) from $gm.goals
       	$me	:   SubordinateRobot()
       	LowLevelInfo( location.distance2D(((VictimRobot)$gD).getLocation())<=1000)
    then
	  	((VictimRobot)$gD).setEnergy(1000);
	  	modify($me){setIdle(true)}
	  	String uuid=UUID.randomUUID().toString();
	  	SimpleTasksFactory.sendMessage($me,new VictimSaved((VictimRobot)$gD, uuid));
  	  	modify($kmt){ setGoalState( GoalState.SOLVED ) }	   
end