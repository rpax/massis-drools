//created on: Apr 11, 2016
package com.massisframework.massis.dasi.apps.robots.subordinate

//std imports
import java.util.*;
import java.util.concurrent.*;
import com.massisframework.massis.dasi.lowlevel.LowLevelInfo;
import com.massisframework.massis.dasi.agents.tasks.AgentTask;
import com.massisframework.massis.dasi.agents.tasks.SimpleTasksFactory;
import com.massisframework.massis.dasi.events.messages.MessageReceived;
import com.massisframework.massis.model.agents.LowLevelAgent;
//robots
import com.massisframework.massis.dasi.apps.robots.*;
import com.massisframework.massis.dasi.apps.robots.messages.*;
import com.massisframework.massis.dasi.apps.robots.messages.teamnegotiation.*;
import com.massisframework.massis.dasi.apps.robots.messages.teamnegotiation.TeamNegotiationInfo.NegotiationStatus;
import com.massisframework.massis.dasi.apps.robots.messages.teamnegotiation.TeamNegotiationInfo;
import com.massisframework.massis.dasi.apps.robots.subordinate.*;
import com.massisframework.massis.dasi.apps.robots.subordinate.info.*;
import com.massisframework.massis.dasi.apps.robots.subordinate.tasks.*;
import com.massisframework.massis.dasi.apps.robots.victim.*;

import com.massisframework.massis.dasi.apps.robots.leader.VictimToSave;
import com.massisframework.massis.dasi.apps.robots.commontasks.*;


//=============================================================================
// Team negotiation rules
//-----------------------------------------------------------------------------

rule "Initiate team negotiation"
	
	when
		not TeamNegotiationInfo()
	then
		insert(new TeamNegotiationInfo(NegotiationStatus.NOT_STARTED));
end

rule "Team join request received - I dont have a team"
	
	when
		$me   : SubordinateRobot()
		$tni : TeamNegotiationInfo( status == NegotiationStatus.NOT_STARTED )
		$mr : MessageReceived(
							data instanceof JoinTeamRequest,
							$sender  : sender,
							$info : data.info,
 							$uuid    :  data.uuid
     						) from entry-point MESSAGING
     			
 	then
 	  $me.getLogger().info("Request from "+$sender+" about team : "+$info);
 	  $me.getLogger().info("I am interested, because I have no team");
 	  
 	  AgentTask task = new EnviarRespuestaHola();
	  task.execute($me, new JoinTeamInfo($tni, $sender, $uuid) );
	  
	  delete($mr);
	  
end

rule "Team join request received - I am waiting for response"
	
	when
		$me   : SubordinateRobot()
		$tni	:	TeamNegotiationInfo(status == NegotiationStatus.WAITING_FOR_RESPONSE,$peer:peer)
		$mr		:	MessageReceived(
									data instanceof YouArePartOfMyTeam,
									$uuid : data.uuid,
									$teamName : data.info,
									sender==$peer,
									$sender : sender
									) from entry-point MESSAGING
 	then
 	  $me.getLogger().info("Received YouArePartOfMyTeam message from "+$sender+". Joining team "+$teamName);
 	  $me.getLogger().info("Finishing negotiation");
 	 
 	  AgentTask task = new UnirseEquipo();
	  task.execute($me, new JoinTeamInfo($tni, $sender, $uuid, $teamName) );
 	 
	  delete($mr);
	  
end

rule "Received save victim order"
    when
       $me	: SubordinateRobot(idle == true)
       $mr	:	MessageReceived(
						data instanceof SaveVictim,
						$victim : data.info
						) from entry-point MESSAGING
    then
	  //ñapa demo
	  $me.getLogger().info("Received save victim order");
	  modify($me){setIdle(false)}
	  insert(new VictimToSave($victim));
	  delete($mr);
	 
end

rule "Save victim - approach"
    when
       VictimToSave($victim : victim)
       $me	:   SubordinateRobot()
       LowLevelInfo( location.distance2D($victim.getLocation())>1000)
    then
	  //ñapa demo
	  AgentTask task = new MoveToTarget();
	  task.execute($me,$victim.getLocation());
	 // $me.getLogger().info("moving to "+$victim+"for saving");
end

rule "If another victim is seen, recharge it"
    when
      $me	:   SubordinateRobot()
      LowLevelInfo( $avr: agentsInVisionRadio)
      LowLevelAgent( $victim : highLevelData  instanceof VictimRobot) from $avr
    then
 	  AgentTask task = new Recargar();
	  task.execute($me,$victim);
end

rule "Save victim - recharge"
    when
       $vts: VictimToSave($victim : victim)
       $me	:   SubordinateRobot()
       LowLevelInfo( location.distance2D($victim.getLocation())<=1000)
    then
	  AgentTask r_task = new Recargar();
	  r_task.execute($me,$victim);
	  
	  $me.getLogger().info("updating energy");
	  delete($vts);
	  modify($me){setIdle(true)}
	  
	  AgentTask idle_task = new EnviarYaEstoyDisponible();
	  idle_task.execute($me,$victim);
end



















