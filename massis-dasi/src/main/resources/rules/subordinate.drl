//created on: Apr 11, 2016
package com.massisframework.massis.dasi.apps.robots.subordinate

//std imports
import java.util.*;
import java.util.concurrent.*;
import com.massisframework.massis.dasi.lowlevel.LowLevelInfo;
import com.massisframework.massis.dasi.agents.tasks.AgentTask;
import com.massisframework.massis.dasi.agents.tasks.SimpleTasksFactory;
import com.massisframework.massis.dasi.events.messages.MessageReceived;
import com.massisframework.massis.model.agents.LowLevelAgent;
//robots
import com.massisframework.massis.dasi.apps.robots.*;
import com.massisframework.massis.dasi.apps.robots.messages.*;
import com.massisframework.massis.dasi.apps.robots.messages.team.*;

import com.massisframework.massis.dasi.apps.robots.subordinate.*;
import com.massisframework.massis.dasi.apps.robots.subordinate.info.*;
import com.massisframework.massis.dasi.apps.robots.subordinate.tasks.*;
import com.massisframework.massis.dasi.apps.robots.victim.*;

import com.massisframework.massis.dasi.apps.robots.leader.VictimToSave;
import com.massisframework.massis.dasi.apps.robots.commontasks.*;


//=============================================================================
// Team negotiation rules
//-----------------------------------------------------------------------------

rule "HiTeam message Received - It is my team."
	when
		$me   : SubordinateRobot($team: teamName)
		$mr : MessageReceived(
							data instanceof HiTeam,
							$sender  : sender,
							$info : data.info,
 							$uuid    :  data.uuid
     						) from entry-point MESSAGING
     	eval($team==$info)
 	then
 	//  $me.getLooger().info("I have a message from my leader.");
 	 // $me.getLooger().info("Sending message from Me :"+$me+" -> Leader:"+$sender+".");
 	  
 	  SimpleTasksFactory.sendMessage($me,$sender,new HiTeamResponseMember($team, $uuid));
	  delete($mr);
end


rule "HiTeam message Received - It isn't my team."
	when
		$me : SubordinateRobot($team: teamName)
		$mr : MessageReceived(
							data instanceof HiTeam,
							$sender  : sender,
							$info : data.info,
 							$uuid    :  data.uuid
     						) from entry-point MESSAGING
     	not(eval($team==$info))
 	then
 	 // $me.getLogger().info("I have a message from other team leader.");
 	  //$me.getLogger().info("Deleting message from inbox.");
 	  delete($mr);
end



rule "You are part of my team message Received."
	when
		$me : SubordinateRobot($team : teamName)
		$mr : MessageReceived(
							data instanceof YouArePartOfMyTeam,
							$sender  : sender,
							$info : data.info,
 							$uuid    :  data.uuid
     						) from entry-point MESSAGING
     	eval($team==$info)
 	then
 	  //$me.getLooger().info("My team leader knows that i'm a member of the team.");
 	  delete($mr);
end



//=============================================================================
// Operational order negotiation rules
//-----------------------------------------------------------------------------


rule "Receive I have no energy message - But I'm not a Leader"
    when
       $me	: SubordinateRobot()
       $mr		: MessageReceived(
							data instanceof IHaveNoEnergy,
							sender instanceof RobotAgent,
							$sender  : sender,
							$location : data.info,
							$uuid : data.uuid
     						) from entry-point MESSAGING
     //already knows that the victim should be saved					
    then
	 //$me.getLogger().info("Received message from a victim but i'm not a leader.");
	 //$me.getLooger().info("Deleting message from inbox.");
	 delete($mr);
end


rule "Received save victim order"
    when
       $me	: SubordinateRobot(idle == true)
       $mr	:	MessageReceived(
						data instanceof SaveVictim,
						$victim : data.info
						) from entry-point MESSAGING
    then
	  //ñapa demo
	  //$me.getLogger().info("Received save victim order");
	  modify($me){setIdle(false)}
	  insert(new VictimToSave($victim));
	  delete($mr);
	 
end

rule "Save victim - approach"
    when
       VictimToSave($victim : victim)
       $me	:   SubordinateRobot()
       LowLevelInfo( location.distance2D($victim.getLocation())>1000)
    then
	  //ñapa demo
	  AgentTask task = new MoveToTarget();
	  task.execute($me,$victim.getLocation());
	 // $me.getLogger().info("moving to "+$victim+"for saving");
end

rule "If another victim is seen, recharge it"
    when
      LowLevelInfo( $avr: agentsInVisionRadio)
      LowLevelAgent( $victim : highLevelData  instanceof VictimRobot) from $avr
    then
 	  ((VictimRobot)$victim).setEnergy(1000);
end

rule "Save victim - recharge"
    when
       $vts: VictimToSave($victim : victim)
       $me	:   SubordinateRobot()
       LowLevelInfo( location.distance2D($victim.getLocation())<=1000)
    then
	  $victim.setEnergy(1000);
	  $me.getLogger().info("updating energy");
	  delete($vts);
	  modify($me){setIdle(true)}
	  String uuid=UUID.randomUUID().toString();
	  SimpleTasksFactory.sendMessage($me,new VictimSaved($victim, uuid));
end



















